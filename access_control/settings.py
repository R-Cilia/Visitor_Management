"""
Django settings for access_control project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os, json

# Importing configuration from a JSON file
with open('/home/rustja/coding/Visitor_Management/access_control/acctrol-config.json') as config_file:
    config = json.load(config_file)

# Get the current directory of the file
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# List of allowed hosts to access the application
ALLOWED_HOSTS = ['www.acctrol.com', 'localhost', '127.0.0.1']


# Application definition
INSTALLED_APPS = [
    # 'termsandconditions',
    'users.apps.UsersConfig',
    'visitor_management.apps.VisitorManagementConfig',
    'crispy_forms',
    'django_filters',
    'bootstrapform',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# List of middleware to be used
MIDDLEWARE = [
    #'termsandconditions.middleware.TermsAndConditionsRedirectMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Root URL configuration
ROOT_URLCONF = 'access_control.urls'

# List of templates to be used
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'access_control.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# Timezone setting. See https://docs.djangoproject.com/en/3.1/ref/settings/#time-zone
TIME_ZONE = 'UTC'

# Internationalization setting. See https://docs.djangoproject.com/en/3.1/topics/i18n/
LANGUAGE_CODE = 'en-us'

# Use of translations. See https://docs.djangoproject.com/en/3.1/topics/i18n/translation/
USE_I18N = True

# Use of translations. See https://docs.djangoproject.com/en/3.1/topics/i18n/formatting/
USE_L10N = True

# Use of translations. See https://docs.djangoproject.com/en/3.1/topics/i18n/timezones/
USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# This variable is used to define the location where static files will be collected.
# The 'static' folder will be created in the base directory and all the static files will be placed inside it.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# This variable is used to define the URL prefix for static files.
# All the static files will be accessed using this URL prefix.
STATIC_URL = '/static/'

# This variable is used to define the location where media files will be stored.
# The 'media' folder will be created in the base directory and all the media files will be placed inside it.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# This variable is used to define the URL prefix for media files.
# All the media files will be accessed using this URL prefix.
MEDIA_URL = '/media/'

# This variable is used to define the template pack that will be used to render forms.
# 'bootstrap4' is used to render forms in the bootstrap 4 template.
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# This variable is used to define the URL that the user will be redirected to after successful login.
LOGIN_REDIRECT_URL = 'vm-vis__emp'

# This variable is used to define the URL for the login page.
LOGIN_URL = 'use-login'

# This variable is used to define the email backend that will be used to send emails.
# 'django.core.mail.backends.smtp.EmailBackend' is used to send emails using the SMTP protocol.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# This variable is used to define the hostname of the SMTP server that will be used to send emails.
EMAIL_HOST = 'smtp.gmail.com'

# This variable is used to define the port number of the SMTP server that will be used to send emails.
EMAIL_PORT = 587

# This variable is used to indicate whether to use TLS when sending emails or not.
EMAIL_USE_TLS = True

# This variable is used to define the username that will be used to login to the SMTP server.
EMAIL_HOST_USER = config.get('EMAIL_USER')

# This variable is used to define the password that will be used to login to the SMTP server.
EMAIL_HOST_PASSWORD = config.get('EMAIL_PASS')


#TWILLIO CREDS
# This variable is used to define the Twilio account SID that will be used to send SMS messages.
ACCOUNT_SID = config.get('ACCOUNT_SID')

# This variable is used to define the Twilio auth token that will be used to send SMS messages.
AUTH_TOKEN = config.get('AUTH_TOKEN')
